#include <CGAL/Exact_predicates_inexact_constructions_kernel.h>
#include <CGAL/Delaunay_triangulation_2.h>
#include <CGAL/Triangulation_face_base_with_info_2.h>
#include <vector>
#include <cmath>


#include <boost/graph/adjacency_list.hpp>

// For max flow
typedef adjacency_list_traits<vecS, vecS, directedS> Traits;
typedef adjacency_list<vecS, vecS, directedS, no_property,
    property<edge_capacity_t, long,
        property<edge_residual_capacity_t, long,
            property<edge_reverse_t, Traits::edge_descriptor> > > > Graph;
typedef property_map<Graph, edge_capacity_t>::type EdgeCapacityMap;
typedef property_map<Graph, edge_residual_capacity_t>::type ResidualCapacityMap;
typedef property_map<Graph, edge_reverse_t>::type ReverseEdgeMap;
typedef graph_traits<Graph>::edge_descriptor Edge;
typedef graph_traits<Graph>::vertex_descriptor Vertex;

// For CGAL Triangulation
typedef CGAL::Exact_predicates_inexact_constructions_kernel K;
typedef Triangulation::Finite_edges_iterator Edge_Iterator;
typedef CGAL::Triangulation_vertex_base_2<K> Vb;
typedef CGAL::Triangulation_face_base_with_info_2<myInt,K> Fb;
typedef CGAL::Triangulation_data_structure_2<Vb,Fb> Tds;
typedef CGAL::Delaunay_triangulation_2<K,Tds>  Triangulation;
typedef Triangulation::Finite_edges_iterator  Edge_iterator;

using namespace std;


void addEdge(int from, int to, long c,
             EdgeCapacityMap &capacity, ReverseEdgeMap &rev_edge, Graph &G) {
     Edge e, reverseE;
     tie(e, tuples::ignore) = add_edge(from, to, G);
     tie(reverseE, tuples::ignore) = add_edge(to, from, G);
     capacity[e] = c;
     capacity[reverseE] = 0;
     rev_edge[e] = reverseE;
     rev_edge[reverseE] = e;
}


private class myInt {
	public:
		static int global_counter = 1;
		static const int INFINITE_VERTEX = 0;
		int vertex_id;
		myInt() {
			vertex_id = -1;
		}
		static int get_global_counter() {
			return global_counter++;
		}
}

double ceil_to_double(const K::FT& x) {
	double a = std::ceil(CGAL::to_double(x));
	while (a < x) a += 1;
	while (a-1 >= x) a -= 1;
	return a;
}

void testcase(size_t n) {
	//Store points, so that they can be inserted more efficiently later
	vector<K::Point_2> pts;
	pts.reserve(n);

	for (size_t i=0; i<n; i++) {
		int x, y;
		cin >> x >> y;
		pts.push_back(K::Point_2(x, y));
	}

	//Construct the triangulation
	Triangulation t;
	t.insert(pts.begin(), pts.end());

	

	//Construct our graph

	Graph G;

	EdgeCapacityMap capacity = get(edge_capacity, G);
	ReverseEdgeMap rev_edge = get(edge_reverse, G);
	ResidualCapacityMap res_capacity = get(edge_residual_capacity, G);	

	for (Edge_iterator e = t.finite_edges_begin(); e != finite_edges_end(); e++) {
		CGAL::Face_handle f1 = e.first;
		//Vertex_handle v2 = e.first->vertex(e.second);
		if (is_infinite(f1))
			f1->info().vertex_id = myInt::INFINITE_VERTEX;
		CGAL::Face_handle f2 = f1.neighbor(e.second);
		
		if (is_infinite(f2))
			f2->info().vertex_id = myInt::INFINITE_VERTEX;

		Triangulation::Vertex_handle v1 = e.first->vertex((e.second + 1) % 3);
		Triangulation::Vertex_handle v2 = e.first->vertex((e.second + 2) % 3);
		double sq_distance = CGAL::squared_distance(v1->point(), v2->point());
		if (f1->info().vertex_id == -1) {
			f1->info().vertex_id = get_global_counter();
		}			

		if (f2->info().vertex_id == -1) {
			f2->info().vertex_id = get_global_counter();
		}		

		addEdge(f1->info().vertex_id, f2->info().vertex_id, sq_distance ,capacity, rev_edge, G);

		addEdge(f2->info().vertex_id, f1->info().vertex_id, sq_distance ,capacity, rev_edge, G);

		

	}	

	//Number of users asking for escape route
	size_t m;
	cin >> m;
	
	Vertex dfs_target = myInt::INFINITE_VERTEX;

	for (size_t i=0; i<m; i++) {
		//Motion planning for each user
		int x, y;	
		double d;	
		cin >> x >> y;
		cin >> d;
		K::Point_2 start_p(x,y);
		Face_handle start_face = locate(start_p);

		Vertex dfs_source = start_face->info().vertex_id;

		
		
	}

}


int main() {

	size_t n;
	cin >> n;
	while(n!=0) {
		testcase(n);
		cin >> n;
	}

	return 0;
}
